const express = require('express');
const {body} = require('express-validator');
const twoFAController = require('../../controllers/auth/twoFAController');
const {authenticateJWT} = require('../../middleware/authMiddleware');

const router = express.Router();

/**
 * @swagger
 * /api/auth/2fa/enable:
 *   post:
 *     summary: Enable Two-Factor Authentication (2FA)
 *     description: Starts the process of enabling 2FA for the authenticated user. Depending on the selected method, an OTP or secret key will be sent or generated for verification.
 *     tags:
 *       - Two-Factor Authentication
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - method
 *             properties:
 *               method:
 *                 type: string
 *                 enum: [email, phone, app]
 *                 example: email
 *                 description: Preferred 2FA method (`email`, `phone`, or `app` for authenticator apps).
 *     responses:
 *       200:
 *         description: Two-factor authentication setup initiated successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: 2FA setup initiated. Verify using the provided method.
 *                 secret:
 *                   type: string
 *                   example: "JBSWY3DPEHPK3PXP"
 *                   description: Secret key (only returned when using an authenticator app).
 *       400:
 *         description: Invalid input or unsupported 2FA method.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Invalid 2FA method provided.
 *       401:
 *         description: Unauthorized request. Missing or invalid access token.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Authentication required.
 *       500:
 *         description: Internal server error while initiating 2FA setup.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Failed to initiate 2FA setup.
 */
router.post('/enable', authenticateJWT, [
    body('method').isIn(['email', 'phone', 'app']).withMessage('Method must be email, phone, or app')
], twoFAController.enable2FA);

/**
 * @swagger
 * /api/auth/2fa/verify:
 *   post:
 *     summary: Verify and complete Two-Factor Authentication (2FA) setup
 *     description: Verifies the one-time code or token to complete 2FA setup for the authenticated user.
 *     tags:
 *       - Two-Factor Authentication
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - method
 *               - token
 *             properties:
 *               method:
 *                 type: string
 *                 enum: [email, phone, app]
 *                 example: email
 *                 description: The 2FA method being verified (`email`, `phone`, or `app` for authenticator apps).
 *               token:
 *                 type: string
 *                 example: "123456"
 *                 description: The verification code or token generated by the selected 2FA method.
 *     responses:
 *       200:
 *         description: Two-factor authentication verified and enabled successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Two-factor authentication has been enabled.
 *       400:
 *         description: Invalid input or verification failed.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Invalid or expired verification token.
 *       401:
 *         description: Unauthorized access. Missing or invalid token.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Authentication required.
 *       500:
 *         description: Internal server error.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Failed to verify 2FA setup due to a server error.
 */
router.post('/verify', authenticateJWT, [
    body('method').isIn(['email', 'phone', 'app']).withMessage('Method must be email, phone, or app'),
    body('token').notEmpty().withMessage('Verification token is required')
], twoFAController.verify2FA);

/**
 * @swagger
 * /api/auth/2fa/disable:
 *   post:
 *     summary: Disable Two-Factor Authentication (2FA)
 *     description: Disables 2FA for the authenticated user. The user must confirm their identity by providing their current password.
 *     tags:
 *       - Two-Factor Authentication
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - password
 *             properties:
 *               password:
 *                 type: string
 *                 format: password
 *                 example: "Pass@1234"
 *                 description: The user's account password for security verification.
 *     responses:
 *       200:
 *         description: 2FA disabled successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Two-factor authentication has been disabled.
 *       400:
 *         description: Invalid input or incorrect password.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Incorrect password or invalid request.
 *       401:
 *         description: Unauthorized access. Missing or invalid token.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Authentication required.
 *       500:
 *         description: Internal server error.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Failed to disable 2FA due to a server error.
 */

router.post('/disable', authenticateJWT, [
    body('password').notEmpty().withMessage('Password is required')
], twoFAController.disable2FA);

/**
 * @swagger
 * /api/auth/2fa/authenticate:
 *   post:
 *     summary: Verify Two-Factor Authentication (2FA) during login
 *     description: Validates a user's 2FA token after successful password authentication. Supports verification via email, phone, authenticator app, or backup code.
 *     tags:
 *       - Two-Factor Authentication
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - userId
 *               - token
 *               - method
 *             properties:
 *               userId:
 *                 type: string
 *                 example: "671a8d2e4f52b92d1c8b9a11"
 *                 description: Unique identifier of the user attempting to log in.
 *               token:
 *                 type: string
 *                 example: "123456"
 *                 description: One-time password (OTP) or backup verification code.
 *               method:
 *                 type: string
 *                 enum: [email, phone, app, backup]
 *                 example: email
 *                 description: Method used for verification (email, phone, app, or backup code).
 *     responses:
 *       200:
 *         description: Two-factor authentication verified successfully. Returns new access and refresh tokens.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Two-factor authentication verified successfully.
 *                 accessToken:
 *                   type: string
 *                   description: Newly issued JWT access token.
 *                 refreshToken:
 *                   type: string
 *                   description: Newly issued JWT refresh token.
 *       400:
 *         description: Invalid input or missing required fields.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Invalid request body or missing parameters.
 *       401:
 *         description: Invalid or expired verification token.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Invalid or expired verification code.
 *       500:
 *         description: Internal server error during 2FA verification.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: Failed to verify two-factor authentication.
 */
router.post(
    '/authenticate',
    [
        body('userId').notEmpty().withMessage('User ID is required'),
        body('token').notEmpty().withMessage('Verification token is required'),
        body('method')
            .isIn(['email', 'phone', 'app', 'backup'])
            .withMessage('Method must be one of: email, phone, app, or backup'),
    ],
    twoFAController.authenticate2FA
);

module.exports = router;